[
  {
    "objectID": "HW5.html",
    "href": "HW5.html",
    "title": "ST 558 - Homework 5",
    "section": "",
    "text": "1.) The bootstrap samples serve as a cross validation method that compares different sets of data in order to improve the fit. The cross validation helps to create each tree.\n2.) A bagged tree algorithm separates the data and randomly samples data from within each section. then it creates a separate tree and combines them to create a better tree. Then it uses OOB modeling as internal validation.\n3.) A general linear model is a supervised learning method used to predict continuous response variables.\n4.) Adding an interaction term to a multiple linear regression allows it to fit nonlinear data and explore more complex and accurate ways of predicting the response variable.\n5.) The data is split so that we can test our model on data that has not been used to train it. This helps us to generalize beyond the sample better and to avoid overfitting the model to our sample."
  },
  {
    "objectID": "HW5.html#task-1",
    "href": "HW5.html#task-1",
    "title": "ST 558 - Homework 5",
    "section": "",
    "text": "1.) The bootstrap samples serve as a cross validation method that compares different sets of data in order to improve the fit. The cross validation helps to create each tree.\n2.) A bagged tree algorithm separates the data and randomly samples data from within each section. then it creates a separate tree and combines them to create a better tree. Then it uses OOB modeling as internal validation.\n3.) A general linear model is a supervised learning method used to predict continuous response variables.\n4.) Adding an interaction term to a multiple linear regression allows it to fit nonlinear data and explore more complex and accurate ways of predicting the response variable.\n5.) The data is split so that we can test our model on data that has not been used to train it. This helps us to generalize beyond the sample better and to avoid overfitting the model to our sample."
  },
  {
    "objectID": "HW5.html#task-2-fitting-models",
    "href": "HW5.html#task-2-fitting-models",
    "title": "ST 558 - Homework 5",
    "section": "Task 2: Fitting Models",
    "text": "Task 2: Fitting Models\n\n# libraries\n\nlibrary(caret)\n\nLoading required package: ggplot2\n\n\nLoading required package: lattice\n\nlibrary(tidyr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ purrr::lift()   masks caret::lift()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(Hmisc)\n\n\nAttaching package: 'Hmisc'\n\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.1\nType rfNews() to see new features/changes/bug fixes.\n\nAttaching package: 'randomForest'\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\n\nQuick EDA/Data Preparation\n\n\n\n1.) understand the data better\n\n# reading in the data and reading about the data \n# (https://www.kaggle.com/datasets/fedesoriano/heart-failure-prediction)\n\nheart_data &lt;- read.csv(\"https://www4.stat.ncsu.edu/~online/datasets/heart.csv\")\n\n\n# checking for missing data and summarizing the data\n\ndescribe(heart_data)\n\nheart_data \n\n 12  Variables      918  Observations\n--------------------------------------------------------------------------------\nAge \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     918        0       50    0.999    53.51    10.71       37       40 \n     .25      .50      .75      .90      .95 \n      47       54       60       65       68 \n\nlowest : 28 29 30 31 32, highest: 73 74 75 76 77\n--------------------------------------------------------------------------------\nSex \n       n  missing distinct \n     918        0        2 \n                    \nValue         F    M\nFrequency   193  725\nProportion 0.21 0.79\n--------------------------------------------------------------------------------\nChestPainType \n       n  missing distinct \n     918        0        4 \n                                  \nValue        ASY   ATA   NAP    TA\nFrequency    496   173   203    46\nProportion 0.540 0.188 0.221 0.050\n--------------------------------------------------------------------------------\nRestingBP \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     918        0       67    0.993    132.4    20.09      106      110 \n     .25      .50      .75      .90      .95 \n     120      130      140      160      160 \n\nlowest :   0  80  92  94  95, highest: 180 185 190 192 200\n--------------------------------------------------------------------------------\nCholesterol \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     918        0      222    0.993    198.8      116      0.0      0.0 \n     .25      .50      .75      .90      .95 \n   173.2    223.0    267.0    305.0    331.3 \n\nlowest :   0  85 100 110 113, highest: 491 518 529 564 603\n--------------------------------------------------------------------------------\nFastingBS \n       n  missing distinct     Info      Sum     Mean      Gmd \n     918        0        2    0.536      214   0.2331   0.3579 \n\n--------------------------------------------------------------------------------\nRestingECG \n       n  missing distinct \n     918        0        3 \n                               \nValue         LVH Normal     ST\nFrequency     188    552    178\nProportion  0.205  0.601  0.194\n--------------------------------------------------------------------------------\nMaxHR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     918        0      119        1    136.8    29.03       96      103 \n     .25      .50      .75      .90      .95 \n     120      138      156      170      178 \n\nlowest :  60  63  67  69  70, highest: 190 192 194 195 202\n--------------------------------------------------------------------------------\nExerciseAngina \n       n  missing distinct \n     918        0        2 \n                      \nValue          N     Y\nFrequency    547   371\nProportion 0.596 0.404\n--------------------------------------------------------------------------------\nOldpeak \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     918        0       53    0.934   0.8874    1.126      0.0      0.0 \n     .25      .50      .75      .90      .95 \n     0.0      0.6      1.5      2.3      3.0 \n\nlowest : -2.6 -2   -1.5 -1.1 -1  , highest: 4.2  4.4  5    5.6  6.2 \n--------------------------------------------------------------------------------\nST_Slope \n       n  missing distinct \n     918        0        3 \n                            \nValue       Down  Flat    Up\nFrequency     63   460   395\nProportion 0.069 0.501 0.430\n--------------------------------------------------------------------------------\nHeartDisease \n       n  missing distinct     Info      Sum     Mean      Gmd \n     918        0        2    0.741      508   0.5534   0.4948 \n\n--------------------------------------------------------------------------------\n\n# there is a column here that gives you the number of missing data points\n\n# Looks like we're good!\n\n\n# summary statistics\n\nsummary(heart_data)\n\n      Age            Sex            ChestPainType        RestingBP    \n Min.   :28.00   Length:918         Length:918         Min.   :  0.0  \n 1st Qu.:47.00   Class :character   Class :character   1st Qu.:120.0  \n Median :54.00   Mode  :character   Mode  :character   Median :130.0  \n Mean   :53.51                                         Mean   :132.4  \n 3rd Qu.:60.00                                         3rd Qu.:140.0  \n Max.   :77.00                                         Max.   :200.0  \n  Cholesterol      FastingBS       RestingECG            MaxHR      \n Min.   :  0.0   Min.   :0.0000   Length:918         Min.   : 60.0  \n 1st Qu.:173.2   1st Qu.:0.0000   Class :character   1st Qu.:120.0  \n Median :223.0   Median :0.0000   Mode  :character   Median :138.0  \n Mean   :198.8   Mean   :0.2331                      Mean   :136.8  \n 3rd Qu.:267.0   3rd Qu.:0.0000                      3rd Qu.:156.0  \n Max.   :603.0   Max.   :1.0000                      Max.   :202.0  \n ExerciseAngina        Oldpeak          ST_Slope          HeartDisease   \n Length:918         Min.   :-2.6000   Length:918         Min.   :0.0000  \n Class :character   1st Qu.: 0.0000   Class :character   1st Qu.:0.0000  \n Mode  :character   Median : 0.6000   Mode  :character   Median :1.0000  \n                    Mean   : 0.8874                      Mean   :0.5534  \n                    3rd Qu.: 1.5000                      3rd Qu.:1.0000  \n                    Max.   : 6.2000                      Max.   :1.0000  \n\n\n\n# this is giving us summary stats for when heart disease is 0 and 1\n\nlapply(split(heart_data, heart_data$HeartDisease), describe)\n\n$`0`\nX[[i]] \n\n 12  Variables      410  Observations\n--------------------------------------------------------------------------------\nAge \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     410        0       48    0.999    50.55    10.75     35.0     38.9 \n     .25      .50      .75      .90      .95 \n    43.0     51.0     57.0     63.0     66.0 \n\nlowest : 28 29 30 31 32, highest: 71 72 74 75 76\n--------------------------------------------------------------------------------\nSex \n       n  missing distinct \n     410        0        2 \n                      \nValue          F     M\nFrequency    143   267\nProportion 0.349 0.651\n--------------------------------------------------------------------------------\nChestPainType \n       n  missing distinct \n     410        0        4 \n                                  \nValue        ASY   ATA   NAP    TA\nFrequency    104   149   131    26\nProportion 0.254 0.363 0.320 0.063\n--------------------------------------------------------------------------------\nRestingBP \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     410        0       49    0.987    130.2     18.1    105.5    110.0 \n     .25      .50      .75      .90      .95 \n   120.0    130.0    140.0    150.0    160.0 \n\nlowest :  80  94  98 100 101, highest: 170 172 178 180 190\n--------------------------------------------------------------------------------\nCholesterol \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     410        0      169        1    227.1    75.75    91.75   165.90 \n     .25      .50      .75      .90      .95 \n  197.25   227.00   266.75   305.10   325.00 \n\nlowest :   0  85 100 126 129, highest: 412 417 458 468 564\n--------------------------------------------------------------------------------\nFastingBS \n       n  missing distinct     Info      Sum     Mean      Gmd \n     410        0        2    0.287       44   0.1073   0.1921 \n\n--------------------------------------------------------------------------------\nRestingECG \n       n  missing distinct \n     410        0        3 \n                               \nValue         LVH Normal     ST\nFrequency      82    267     61\nProportion  0.200  0.651  0.149\n--------------------------------------------------------------------------------\nMaxHR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     410        0       90    0.999    148.2    26.34    108.4    116.0 \n     .25      .50      .75      .90      .95 \n   134.0    150.0    165.0    178.0    182.0 \n\nlowest :  69  80  86  90  96, highest: 188 190 192 194 202\n--------------------------------------------------------------------------------\nExerciseAngina \n       n  missing distinct \n     410        0        2 \n                      \nValue          N     Y\nFrequency    355    55\nProportion 0.866 0.134\n--------------------------------------------------------------------------------\nOldpeak \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     410        0       29    0.789    0.408   0.6363      0.0      0.0 \n     .25      .50      .75      .90      .95 \n     0.0      0.0      0.6      1.5      2.0 \n\nlowest : -1.1 -0.5 -0.1 0    0.1 , highest: 2.4  2.6  3    3.5  4.2 \n--------------------------------------------------------------------------------\nST_Slope \n       n  missing distinct \n     410        0        3 \n                            \nValue       Down  Flat    Up\nFrequency     14    79   317\nProportion 0.034 0.193 0.773\n--------------------------------------------------------------------------------\nHeartDisease \n       n  missing distinct     Info     Mean      Gmd \n     410        0        1        0        0        0 \n              \nValue        0\nFrequency  410\nProportion   1\n--------------------------------------------------------------------------------\n\n$`1`\nX[[i]] \n\n 12  Variables      508  Observations\n--------------------------------------------------------------------------------\nAge \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     508        0       47    0.999     55.9    9.784    39.35    43.00 \n     .25      .50      .75      .90      .95 \n   51.00    57.00    62.00    66.00    69.00 \n\nlowest : 31 32 33 34 35, highest: 73 74 75 76 77\n--------------------------------------------------------------------------------\nSex \n       n  missing distinct \n     508        0        2 \n                      \nValue          F     M\nFrequency     50   458\nProportion 0.098 0.902\n--------------------------------------------------------------------------------\nChestPainType \n       n  missing distinct \n     508        0        4 \n                                  \nValue        ASY   ATA   NAP    TA\nFrequency    392    24    72    20\nProportion 0.772 0.047 0.142 0.039\n--------------------------------------------------------------------------------\nRestingBP \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     508        0       61    0.995    134.2    21.45    108.7    110.0 \n     .25      .50      .75      .90      .95 \n   120.0    132.0    145.0    160.0    170.0 \n\nlowest :   0  92  95  96 100, highest: 180 185 190 192 200\n--------------------------------------------------------------------------------\nCholesterol \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     508        0      175    0.973    175.9    137.8        0        0 \n     .25      .50      .75      .90      .95 \n       0      217      267      305      335 \n\nlowest :   0 100 110 113 117, highest: 466 491 518 529 603\n--------------------------------------------------------------------------------\nFastingBS \n       n  missing distinct     Info      Sum     Mean      Gmd \n     508        0        2    0.668      170   0.3346   0.4462 \n\n--------------------------------------------------------------------------------\nRestingECG \n       n  missing distinct \n     508        0        3 \n                               \nValue         LVH Normal     ST\nFrequency     106    285    117\nProportion  0.209  0.561  0.230\n--------------------------------------------------------------------------------\nMaxHR \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     508        0      102    0.999    127.7    26.48    91.35    98.00 \n     .25      .50      .75      .90      .95 \n  112.00   126.00   144.25   158.30   167.30 \n\nlowest :  60  63  67  70  71, highest: 177 180 181 182 195\n--------------------------------------------------------------------------------\nExerciseAngina \n       n  missing distinct \n     508        0        2 \n                      \nValue          N     Y\nFrequency    192   316\nProportion 0.378 0.622\n--------------------------------------------------------------------------------\nOldpeak \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     508        0       50    0.981    1.274    1.272    0.000    0.000 \n     .25      .50      .75      .90      .95 \n   0.000    1.200    2.000    2.930    3.065 \n\nlowest : -2.6 -2   -1.5 -1   -0.9, highest: 4.2  4.4  5    5.6  6.2 \n--------------------------------------------------------------------------------\nST_Slope \n       n  missing distinct \n     508        0        3 \n                            \nValue       Down  Flat    Up\nFrequency     49   381    78\nProportion 0.096 0.750 0.154\n--------------------------------------------------------------------------------\nHeartDisease \n       n  missing distinct     Info     Mean      Gmd \n     508        0        1        0        1        0 \n              \nValue        1\nFrequency  508\nProportion   1\n--------------------------------------------------------------------------------\n\n\n\n# cross tab - using lapply to create many different contingency tables\n\nlapply(heart_data[, c(\"Sex\", \"ChestPainType\", \"RestingECG\", \"ExerciseAngina\")], FUN = function(x) table(heart_data$HeartDisease, x))\n\n$Sex\n   x\n      F   M\n  0 143 267\n  1  50 458\n\n$ChestPainType\n   x\n    ASY ATA NAP  TA\n  0 104 149 131  26\n  1 392  24  72  20\n\n$RestingECG\n   x\n    LVH Normal  ST\n  0  82    267  61\n  1 106    285 117\n\n$ExerciseAngina\n   x\n      N   Y\n  0 355  55\n  1 192 316\n\n\n\n# summarizing the numerical variables. Now we can really see what predictors we might want to use in our models\n\nheart_data |&gt;\n  group_by(HeartDisease) |&gt;\n  dplyr::summarize(across(where(is.numeric),\n                   list(\"mean\" = ~ mean(.x, na.rm = TRUE), \"median\" = ~ median(.x, na.rm = TRUE)), \n                   .names = \"{.fn}_{.col}\"))\n\n# A tibble: 2 × 13\n  HeartDisease mean_Age median_Age mean_RestingBP median_RestingBP\n         &lt;int&gt;    &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1            0     50.6         51           130.              130\n2            1     55.9         57           134.              132\n# ℹ 8 more variables: mean_Cholesterol &lt;dbl&gt;, median_Cholesterol &lt;dbl&gt;,\n#   mean_FastingBS &lt;dbl&gt;, median_FastingBS &lt;dbl&gt;, mean_MaxHR &lt;dbl&gt;,\n#   median_MaxHR &lt;dbl&gt;, mean_Oldpeak &lt;dbl&gt;, median_Oldpeak &lt;dbl&gt;\n\n\n\n\n\n\n\n\n### 2.) creating a new variable\n\n\n\n\n### 3.) create dummy variables to prepare for kNN\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # Create dummy columns for the three categorical predictors using dummyVars() and predict().\n\n\nhelp(dummyVars) ``` :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # making our character variables factor variables, so we can make dummy columns\n\n\nheart_data[,c(“Sex”, “ChestPainType”, “RestingECG”)] = lapply(heart_data[,c(“Sex”, “ChestPainType”, “RestingECG”)],factor) ``` :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # create new variable with names of important factors in it\n\n\nimp_factors = c(“Sex”, “ChestPainType”, “RestingECG”) ``` :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # using these important factors to create the new columns\n\n\nnew_dummy_cols = dummyVars(~Sex + ChestPainType + RestingECG,heart_data,fullRank = T) heart_data=cbind(heart_data,predict(new_dummy_cols, heart_data[,imp_factors])) ``` :::"
  },
  {
    "objectID": "HW5.html#split-your-data",
    "href": "HW5.html#split-your-data",
    "title": "ST 558 - Homework 5",
    "section": "Split your Data",
    "text": "Split your Data\n\n# set a seed for reproducibility\nset.seed(10)\n\n#indices to split on\ntrain &lt;- sample(1:nrow(heart_data), size = nrow(heart_data)*0.8)\ntest &lt;- dplyr::setdiff(1:nrow(heart_data), train)\n\n#subset\nheartTrain &lt;- heart_data[train, ]\nheartTest &lt;- heart_data[test, ]\n\n\n\n\n\n\n\n## kNN\n\n\n::: {.cell}\n\n\n{.r .cell-code} # lets learn how to use this training function so we can build our models help(trainControl) :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # defining cv arguments that will be used as an argument inside each model function\n\n\ncv_settings &lt;- trainControl(method = “repeatedcv”, number = 10, repeats = 3) ``` :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} help(train)\n\n\n::: {.cell-output .cell-output-stdout}\n\n\n``` Help on topic ‘train’ was found in the following packages:\n\n\nPackage Library caret /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library generics /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library\n\n\nUsing the first match … ```\n\n\n::: :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} # lets set our tuning parameters so we can fit our knn tune_grid &lt;- expand.grid(k = 1:40) :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # here is the function for our first model\n\n\nmy_knn &lt;- train(HeartDisease_factor ~., data = heartTrain, method = “knn”, trControl = cv_settings, preProcess = c(“center”, “scale”), tuneGrid = tune_grid) ``` :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} my_knn\n\n\n::: {.cell-output .cell-output-stdout}\n\n\n``` k-Nearest Neighbors\n\n\n734 samples 16 predictor 2 classes: ‘Normal’, ‘heart disease’\n\n\nPre-processing: centered (19), scaled (19) Resampling: Cross-Validated (10 fold, repeated 3 times) Summary of sample sizes: 660, 661, 661, 661, 661, 660, … Resampling results across tuning parameters:\n\n\nk Accuracy Kappa 1 0.7896992 0.5780330 2 0.7887740 0.5757591 3 0.8164801 0.6319130 4 0.8083164 0.6143359 5 0.8196454 0.6372625 6 0.8160046 0.6300577 7 0.8155727 0.6293050 8 0.8237363 0.6458230 9 0.8233105 0.6450844 10 0.8160598 0.6307206 11 0.8210089 0.6408270 12 0.8187011 0.6359217 13 0.8187255 0.6367136 14 0.8137333 0.6266887 15 0.8173863 0.6340240 16 0.8146713 0.6284240 17 0.8155969 0.6306779 18 0.8133321 0.6258051 19 0.8214837 0.6426151 20 0.8192130 0.6378915 21 0.8160230 0.6311379 22 0.8183304 0.6355509 23 0.8178491 0.6347123 24 0.8178616 0.6345326 25 0.8192130 0.6372134 26 0.8214655 0.6415961 27 0.8169297 0.6325122 28 0.8169359 0.6323382 29 0.8174110 0.6333392 30 0.8151461 0.6286248 31 0.8156090 0.6294429 32 0.8169976 0.6321408 33 0.8156154 0.6290970 34 0.8178433 0.6333493 35 0.8133386 0.6242798 36 0.8137582 0.6248029 37 0.8115059 0.6200536 38 0.8155910 0.6275819 39 0.8160478 0.6281456 40 0.8142517 0.6235405\n\n\nAccuracy was used to select the optimal model using the largest value. The final value used for the model was k = 8. ```\n\n\n::: :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} help(predict) :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} # time to use the predict function knn_predict &lt;- predict(my_knn, heartTest) :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} summary(knn_predict)\n\n\n::: {.cell-output .cell-output-stdout}\n\n\nNormal heart disease 79           105\n\n\n::: :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} #Comments\n\n\n# first want to set up a cross validation function - training set will also be split into its own little training/testing set (k fold and then averaging across all combinations). test set is reserved for after model is fit. should not be included in model fitting\n\n\n# remember not to include both versions of variables # data2 = data[,c(“HeartDisease_factor”,“Sex.M”,“ChestPainType.ATA”,…)] # HeartDisease_factor ~ . , data ``` :::\n\n\n::: {.cell}\n\n\n```{.r .cell-code} # confusion matrix\n\n\nconfusionMatrix(knn_predict, heartTest$HeartDisease_factor) ```\n\n\n::: {.cell-output .cell-output-stdout}\n\n\n``` Confusion Matrix and Statistics\n\n\nReference Prediction Normal heart disease Normal 59 20 heart disease 20 85\n\n\nAccuracy : 0.7826 95% CI : (0.716, 0.8399) No Information Rate : 0.5707 P-Value [Acc &gt; NIR] : 1.306e-09\n\n\nKappa : 0.5564\n\n\nMcnemar’s Test P-Value : 1\n\n\nSensitivity : 0.7468 Specificity : 0.8095 Pos Pred Value : 0.7468 Neg Pred Value : 0.8095 Prevalence : 0.4293 Detection Rate : 0.3207 Detection Prevalence : 0.4293 Balanced Accuracy : 0.7782\n\n\n‘Positive’ Class : Normal\n\n\n```\n\n\n::: :::"
  },
  {
    "objectID": "HW5.html#logistic-regression",
    "href": "HW5.html#logistic-regression",
    "title": "ST 558 - Homework 5",
    "section": "Logistic Regression",
    "text": "Logistic Regression\n\n# R will do the dummy coding for you so you can use the regular categorical variables, not dummy. use factor variables\n\n#glmFit &lt;- glm(good ~ yards, \n#             data = FGData, \n#              family = \"binomial\")\n\nmy_logreg_1 &lt;- train(HeartDisease_factor ~ ChestPainType.ATA + RestingECG.ST, data = heartTrain, method = \"glm\", family = \"binomial\", trControl = cv_settings)\n\n\nmy_logreg_1\n\nGeneralized Linear Model \n\n734 samples\n  2 predictor\n  2 classes: 'Normal', 'heart disease' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold, repeated 3 times) \nSummary of sample sizes: 661, 661, 659, 660, 660, 661, ... \nResampling results:\n\n  Accuracy  Kappa    \n  0.696208  0.3519376\n\n\n\nlog1_predict &lt;- predict(my_logreg_1, heartTest)\n\n\nlog1_predict\n\n  [1] Normal        heart disease heart disease Normal        Normal       \n  [6] heart disease Normal        heart disease heart disease heart disease\n [11] Normal        Normal        Normal        Normal        heart disease\n [16] heart disease heart disease Normal        heart disease heart disease\n [21] heart disease Normal        heart disease Normal        heart disease\n [26] heart disease heart disease Normal        heart disease heart disease\n [31] Normal        heart disease Normal        heart disease Normal       \n [36] heart disease heart disease heart disease heart disease heart disease\n [41] heart disease Normal        heart disease heart disease heart disease\n [46] heart disease heart disease heart disease heart disease Normal       \n [51] heart disease heart disease Normal        heart disease Normal       \n [56] heart disease heart disease heart disease heart disease heart disease\n [61] heart disease heart disease heart disease heart disease heart disease\n [66] heart disease heart disease heart disease heart disease heart disease\n [71] heart disease heart disease Normal        heart disease heart disease\n [76] heart disease heart disease heart disease heart disease heart disease\n [81] heart disease heart disease heart disease heart disease heart disease\n [86] heart disease Normal        heart disease heart disease heart disease\n [91] heart disease heart disease heart disease heart disease heart disease\n [96] heart disease Normal        heart disease heart disease heart disease\n[101] heart disease heart disease heart disease heart disease heart disease\n[106] heart disease Normal        heart disease heart disease heart disease\n[111] heart disease heart disease Normal        Normal        heart disease\n[116] heart disease heart disease heart disease heart disease heart disease\n[121] heart disease heart disease heart disease heart disease Normal       \n[126] heart disease heart disease heart disease heart disease Normal       \n[131] heart disease heart disease heart disease Normal        heart disease\n[136] heart disease heart disease Normal        heart disease heart disease\n[141] heart disease heart disease heart disease heart disease heart disease\n[146] heart disease heart disease heart disease heart disease heart disease\n[151] heart disease heart disease heart disease heart disease heart disease\n[156] heart disease heart disease heart disease Normal        heart disease\n[161] heart disease heart disease Normal        Normal        heart disease\n[166] heart disease heart disease heart disease heart disease Normal       \n[171] heart disease heart disease heart disease Normal        Normal       \n[176] Normal        heart disease Normal        heart disease heart disease\n[181] heart disease heart disease heart disease heart disease\nLevels: Normal heart disease\n\n\n\nsummary(log1_predict)\n\n       Normal heart disease \n           37           147 \n\n\n\nmy_logreg_2 &lt;- train(HeartDisease_factor ~ Age + Cholesterol, data = heartTrain, method = \"glm\", family = \"binomial\", trControl = cv_settings)\n\n\nmy_logreg_2\n\nGeneralized Linear Model \n\n734 samples\n  2 predictor\n  2 classes: 'Normal', 'heart disease' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold, repeated 3 times) \nSummary of sample sizes: 661, 661, 661, 661, 661, 660, ... \nResampling results:\n\n  Accuracy   Kappa    \n  0.6526928  0.2922258\n\n\n\nlog2_predict &lt;- predict(my_logreg_2, heartTest)\n\n\nsummary(log2_predict)\n\n       Normal heart disease \n           75           109 \n\n\n\nmy_logreg_3 &lt;- train(HeartDisease_factor ~ MaxHR + RestingBP, data = heartTrain, method = \"glm\", family = \"binomial\", trControl = cv_settings)\n\n\nlog3_predict &lt;- predict(my_logreg_3, heartTest)\n\n\nsummary(log3_predict)\n\n       Normal heart disease \n           75           109 \n\n\n\n# Now let's look at the accuracy of all three\n\nconfusionMatrix(log1_predict, heartTest$HeartDisease_factor)\n\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Normal heart disease\n  Normal            27            10\n  heart disease     52            95\n                                          \n               Accuracy : 0.663           \n                 95% CI : (0.5898, 0.7309)\n    No Information Rate : 0.5707          \n    P-Value [Acc &gt; NIR] : 0.00654         \n                                          \n                  Kappa : 0.2639          \n                                          \n Mcnemar's Test P-Value : 1.919e-07       \n                                          \n            Sensitivity : 0.3418          \n            Specificity : 0.9048          \n         Pos Pred Value : 0.7297          \n         Neg Pred Value : 0.6463          \n             Prevalence : 0.4293          \n         Detection Rate : 0.1467          \n   Detection Prevalence : 0.2011          \n      Balanced Accuracy : 0.6233          \n                                          \n       'Positive' Class : Normal          \n                                          \n\nconfusionMatrix(log2_predict, heartTest$HeartDisease_factor)\n\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Normal heart disease\n  Normal            48            27\n  heart disease     31            78\n                                          \n               Accuracy : 0.6848          \n                 95% CI : (0.6123, 0.7512)\n    No Information Rate : 0.5707          \n    P-Value [Acc &gt; NIR] : 0.0009812       \n                                          \n                  Kappa : 0.3527          \n                                          \n Mcnemar's Test P-Value : 0.6936406       \n                                          \n            Sensitivity : 0.6076          \n            Specificity : 0.7429          \n         Pos Pred Value : 0.6400          \n         Neg Pred Value : 0.7156          \n             Prevalence : 0.4293          \n         Detection Rate : 0.2609          \n   Detection Prevalence : 0.4076          \n      Balanced Accuracy : 0.6752          \n                                          \n       'Positive' Class : Normal          \n                                          \n\nconfusionMatrix(log3_predict, heartTest$HeartDisease_factor)\n\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Normal heart disease\n  Normal            50            25\n  heart disease     29            80\n                                         \n               Accuracy : 0.7065         \n                 95% CI : (0.635, 0.7712)\n    No Information Rate : 0.5707         \n    P-Value [Acc &gt; NIR] : 0.000101       \n                                         \n                  Kappa : 0.3973         \n                                         \n Mcnemar's Test P-Value : 0.683091       \n                                         \n            Sensitivity : 0.6329         \n            Specificity : 0.7619         \n         Pos Pred Value : 0.6667         \n         Neg Pred Value : 0.7339         \n             Prevalence : 0.4293         \n         Detection Rate : 0.2717         \n   Detection Prevalence : 0.4076         \n      Balanced Accuracy : 0.6974         \n                                         \n       'Positive' Class : Normal"
  },
  {
    "objectID": "HW5.html#the-best-logistic-regression-model-was-the-one-with-maximum-heart-rate-and-resting-blood-pressure",
    "href": "HW5.html#the-best-logistic-regression-model-was-the-one-with-maximum-heart-rate-and-resting-blood-pressure",
    "title": "ST 558 - Homework 5",
    "section": "the best logistic regression model was the one with Maximum Heart Rate and Resting Blood Pressure",
    "text": "the best logistic regression model was the one with Maximum Heart Rate and Resting Blood Pressure"
  },
  {
    "objectID": "HW5.html#classification-tree",
    "href": "HW5.html#classification-tree",
    "title": "ST 558 - Homework 5",
    "section": "Classification Tree",
    "text": "Classification Tree\n\nmy_tree &lt;- train(HeartDisease_factor ~ ChestPainType, \n                data = heartTrain, method = \"rpart\", trControl = cv_settings,  tuneGrid = expand.grid(cp = seq(0, 0.1, 0.001)))\nmy_tree\n\nCART \n\n734 samples\n  1 predictor\n  2 classes: 'Normal', 'heart disease' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold, repeated 3 times) \nSummary of sample sizes: 660, 661, 661, 660, 660, 661, ... \nResampling results across tuning parameters:\n\n  cp     Accuracy   Kappa    \n  0.000  0.7614587  0.5196226\n  0.001  0.7614587  0.5196226\n  0.002  0.7614587  0.5196226\n  0.003  0.7614587  0.5196226\n  0.004  0.7614587  0.5196226\n  0.005  0.7614587  0.5196226\n  0.006  0.7614587  0.5196226\n  0.007  0.7614587  0.5196226\n  0.008  0.7614587  0.5196226\n  0.009  0.7614587  0.5196226\n  0.010  0.7614587  0.5196226\n  0.011  0.7560163  0.5074524\n  0.012  0.7560163  0.5074524\n  0.013  0.7560163  0.5074524\n  0.014  0.7523633  0.4991209\n  0.015  0.7523633  0.4991209\n  0.016  0.7523633  0.4991209\n  0.017  0.7491917  0.4920402\n  0.018  0.7491917  0.4920402\n  0.019  0.7491917  0.4920402\n  0.020  0.7491917  0.4920402\n  0.021  0.7491917  0.4910192\n  0.022  0.7491917  0.4910192\n  0.023  0.7491917  0.4910192\n  0.024  0.7514686  0.4946108\n  0.025  0.7514686  0.4946108\n  0.026  0.7514686  0.4946108\n  0.027  0.7532827  0.4979961\n  0.028  0.7532827  0.4979961\n  0.029  0.7532827  0.4979961\n  0.030  0.7532827  0.4979961\n  0.031  0.7532827  0.4979961\n  0.032  0.7532827  0.4979961\n  0.033  0.7532827  0.4979961\n  0.034  0.7532827  0.4979961\n  0.035  0.7532827  0.4979961\n  0.036  0.7532827  0.4979961\n  0.037  0.7532827  0.4979961\n  0.038  0.7532827  0.4979961\n  0.039  0.7532827  0.4979961\n  0.040  0.7532827  0.4979961\n  0.041  0.7532827  0.4979961\n  0.042  0.7532827  0.4979961\n  0.043  0.7532827  0.4979961\n  0.044  0.7532827  0.4979961\n  0.045  0.7532827  0.4979961\n  0.046  0.7532827  0.4979961\n  0.047  0.7532827  0.4979961\n  0.048  0.7532827  0.4979961\n  0.049  0.7532827  0.4979961\n  0.050  0.7532827  0.4979961\n  0.051  0.7532827  0.4979961\n  0.052  0.7532827  0.4979961\n  0.053  0.7532827  0.4979961\n  0.054  0.7532827  0.4979961\n  0.055  0.7532827  0.4979961\n  0.056  0.7532827  0.4979961\n  0.057  0.7532827  0.4979961\n  0.058  0.7532827  0.4979961\n  0.059  0.7532827  0.4979961\n  0.060  0.7532827  0.4979961\n  0.061  0.7532827  0.4979961\n  0.062  0.7532827  0.4979961\n  0.063  0.7532827  0.4979961\n  0.064  0.7532827  0.4979961\n  0.065  0.7532827  0.4979961\n  0.066  0.7532827  0.4979961\n  0.067  0.7532827  0.4979961\n  0.068  0.7532827  0.4979961\n  0.069  0.7532827  0.4979961\n  0.070  0.7532827  0.4979961\n  0.071  0.7532827  0.4979961\n  0.072  0.7532827  0.4979961\n  0.073  0.7532827  0.4979961\n  0.074  0.7532827  0.4979961\n  0.075  0.7532827  0.4979961\n  0.076  0.7532827  0.4979961\n  0.077  0.7532827  0.4979961\n  0.078  0.7532827  0.4979961\n  0.079  0.7532827  0.4979961\n  0.080  0.7532827  0.4979961\n  0.081  0.7532827  0.4979961\n  0.082  0.7532827  0.4979961\n  0.083  0.7532827  0.4979961\n  0.084  0.7532827  0.4979961\n  0.085  0.7532827  0.4979961\n  0.086  0.7532827  0.4979961\n  0.087  0.7532827  0.4979961\n  0.088  0.7532827  0.4979961\n  0.089  0.7532827  0.4979961\n  0.090  0.7532827  0.4979961\n  0.091  0.7532827  0.4979961\n  0.092  0.7532827  0.4979961\n  0.093  0.7532827  0.4979961\n  0.094  0.7532827  0.4979961\n  0.095  0.7532827  0.4979961\n  0.096  0.7532827  0.4979961\n  0.097  0.7532827  0.4979961\n  0.098  0.7532827  0.4979961\n  0.099  0.7532827  0.4979961\n  0.100  0.7532827  0.4979961\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was cp = 0.01.\n\n\n\nplot(my_tree)\n\n\n\n\n\n\n\n\n\ntree_predict &lt;- predict(my_tree, heartTest)\n\n\nsummary(tree_predict)\n\n       Normal heart disease \n           80           104 \n\n\n\nconfusionMatrix(tree_predict, heartTest$HeartDisease_factor)\n\nConfusion Matrix and Statistics\n\n               Reference\nPrediction      Normal heart disease\n  Normal            57            23\n  heart disease     22            82\n                                          \n               Accuracy : 0.7554          \n                 95% CI : (0.6868, 0.8157)\n    No Information Rate : 0.5707          \n    P-Value [Acc &gt; NIR] : 1.364e-07       \n                                          \n                  Kappa : 0.5017          \n                                          \n Mcnemar's Test P-Value : 1               \n                                          \n            Sensitivity : 0.7215          \n            Specificity : 0.7810          \n         Pos Pred Value : 0.7125          \n         Neg Pred Value : 0.7885          \n             Prevalence : 0.4293          \n         Detection Rate : 0.3098          \n   Detection Prevalence : 0.4348          \n      Balanced Accuracy : 0.7512          \n                                          \n       'Positive' Class : Normal          \n                                          \n\n\n\n\n\n\n\n\n## Random Forest Model\n\n\n::: {.cell}\n\n\n{.r .cell-code} my_rf &lt;- train(HeartDisease_factor ~ ChestPainType, data = heartTrain, method = \"rf\", trControl = cv_settings,  tuneGrid = expand.grid(mtry = seq(1, 4, 1)))\n\n\n::: {.cell-output .cell-output-stderr}\n\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range Warning in randomForest.default(x, y, mtry = param$mtry, ...): invalid mtry: reset to within valid range\n\n\n:::\n\n\n{.r .cell-code} my_rf\n\n\n::: {.cell-output .cell-output-stdout}\n\n\n``` Random Forest\n\n\n734 samples 1 predictor 2 classes: ‘Normal’, ‘heart disease’\n\n\nNo pre-processing Resampling: Cross-Validated (10 fold, repeated 3 times) Summary of sample sizes: 660, 660, 661, 661, 661, 661, … Resampling results across tuning parameters:\n\n\nmtry Accuracy Kappa 1 0.7505615 0.4957108 2 0.7614711 0.5198206 3 0.7614711 0.5198206 4 0.7614711 0.5198206\n\n\nAccuracy was used to select the optimal model using the largest value. The final value used for the model was mtry = 2. ```\n\n\n::: :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} rf_predict &lt;- predict(my_rf, heartTest) :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} summary(rf_predict)\n\n\n::: {.cell-output .cell-output-stdout}\n\n\nNormal heart disease 80           104\n\n\n::: :::\n\n\n::: {.cell}\n\n\n{.r .cell-code} confusionMatrix(rf_predict, heartTest$HeartDisease_factor)\n\n\n::: {.cell-output .cell-output-stdout}\n\n\n``` Confusion Matrix and Statistics\n\n\nReference Prediction Normal heart disease Normal 57 23 heart disease 22 82\n\n\nAccuracy : 0.7554 95% CI : (0.6868, 0.8157) No Information Rate : 0.5707 P-Value [Acc &gt; NIR] : 1.364e-07\n\n\nKappa : 0.5017\n\n\nMcnemar’s Test P-Value : 1\n\n\nSensitivity : 0.7215 Specificity : 0.7810 Pos Pred Value : 0.7125 Neg Pred Value : 0.7885 Prevalence : 0.4293 Detection Rate : 0.3098 Detection Prevalence : 0.4348 Balanced Accuracy : 0.7512\n\n\n‘Positive’ Class : Normal\n\n\n```\n\n\n::: :::"
  }
]